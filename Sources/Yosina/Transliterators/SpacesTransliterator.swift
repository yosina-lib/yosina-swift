// This file is automatically generated. Do not edit.
// Generated on: 2025-09-23 06:37:50 +0000

import Foundation

public struct SpacesTransliterator: Transliterator {
    // Using sorted array to handle potential Swift Character equality issues
    private static let sortedMappings: [(Character, Character?)] = [
        ("\u{00A0}", "\u{0020}"),
        ("\u{180E}", nil),
        ("\u{2000}", "\u{0020}"),
        ("\u{2001}", "\u{0020}"),
        ("\u{2002}", "\u{0020}"),
        ("\u{2003}", "\u{0020}"),
        ("\u{2004}", "\u{0020}"),
        ("\u{2005}", "\u{0020}"),
        ("\u{2006}", "\u{0020}"),
        ("\u{2007}", "\u{0020}"),
        ("\u{2008}", "\u{0020}"),
        ("\u{2009}", "\u{0020}"),
        ("\u{200A}", "\u{0020}"),
        ("\u{200B}", "\u{0020}"),
        ("\u{202F}", "\u{0020}"),
        ("\u{205F}", "\u{0020}"),
        ("\u{3000}", "\u{0020}"),
        ("\u{3164}", "\u{0020}"),
        ("\u{FEFF}", nil),
        ("\u{FFA0}", "\u{0020}"),
    ]

    public init() {}

    public func transliterate<S: Sequence>(_ chars: S) -> [TransliteratorChar] where S.Element == TransliteratorChar {
        var result: [TransliteratorChar] = []
        var offset = 0

        for char in chars {
            if let charValue = char.value {
                // Binary search for the character
                let index = Self.sortedMappings.binarySearch { $0.0 < charValue }

                // Check if we found an exact match
                if index < Self.sortedMappings.count && Self.sortedMappings[index].0 == charValue {
                    if let replacement = Self.sortedMappings[index].1 {
                        let newChar = TransliteratorChar(value: replacement, offset: offset, source: char)
                        offset += replacement.utf8.count
                        result.append(newChar)
                        continue
                    }
                    // If replacement is nil, skip this character (don't append it)
                    continue
                }
            }

            // No mapping found, keep the original character
            let char = char.withOffset(offset)
            offset += char.utf8Count
            result.append(char)
        }

        return result
    }
}

private extension Array {
    func binarySearch(by predicate: (Element) -> Bool) -> Index {
        var low = startIndex
        var high = endIndex

        while low < high {
            let mid = index(low, offsetBy: distance(from: low, to: high) / 2)
            if predicate(self[mid]) {
                low = index(after: mid)
            } else {
                high = mid
            }
        }

        return low
    }
}
