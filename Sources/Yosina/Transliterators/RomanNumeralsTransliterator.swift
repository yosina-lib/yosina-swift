// This file is automatically generated. Do not edit.
// Generated on: 2025-09-23 06:37:50 +0000

import Foundation

public struct RomanNumeralsTransliterator: Transliterator {
    private static let mapping: [Character: String] = [
        "\u{2160}": "\u{0049}",
        "\u{2170}": "\u{0069}",
        "\u{2161}": "\u{0049}\u{0049}",
        "\u{2171}": "\u{0069}\u{0069}",
        "\u{2162}": "\u{0049}\u{0049}\u{0049}",
        "\u{2172}": "\u{0069}\u{0069}\u{0069}",
        "\u{2163}": "\u{0049}\u{0056}",
        "\u{2173}": "\u{0069}\u{0076}",
        "\u{2164}": "\u{0056}",
        "\u{2174}": "\u{0076}",
        "\u{2165}": "\u{0056}\u{0049}",
        "\u{2175}": "\u{0076}\u{0069}",
        "\u{2166}": "\u{0056}\u{0049}\u{0049}",
        "\u{2176}": "\u{0076}\u{0069}\u{0069}",
        "\u{2167}": "\u{0056}\u{0049}\u{0049}\u{0049}",
        "\u{2177}": "\u{0076}\u{0069}\u{0069}\u{0069}",
        "\u{2168}": "\u{0049}\u{0058}",
        "\u{2178}": "\u{0069}\u{0078}",
        "\u{2169}": "\u{0058}",
        "\u{2179}": "\u{0078}",
        "\u{216A}": "\u{0058}\u{0049}",
        "\u{217A}": "\u{0078}\u{0069}",
        "\u{216B}": "\u{0058}\u{0049}\u{0049}",
        "\u{217B}": "\u{0078}\u{0069}\u{0069}",
        "\u{216C}": "\u{004C}",
        "\u{217C}": "\u{006C}",
        "\u{216D}": "\u{0043}",
        "\u{217D}": "\u{0063}",
        "\u{216E}": "\u{0044}",
        "\u{217E}": "\u{0064}",
        "\u{216F}": "\u{004D}",
        "\u{217F}": "\u{006D}",
    ]

    public init() {}

    public func transliterate<S: Sequence>(_ chars: S) -> [TransliteratorChar] where S.Element == TransliteratorChar {
        var result: [TransliteratorChar] = []
        var offset = 0

        for char in chars {
            if let charValue = char.value, let replacements = Self.mapping[charValue] {
                for replacement in replacements {
                    let char = TransliteratorChar(
                        value: replacement,
                        offset: offset,
                        source: char
                    )
                    offset += replacement.utf8.count
                    result.append(char)
                }
            } else {
                let char = char.withOffset(offset)
                offset += char.utf8Count
                result.append(char)
            }
        }

        return result
    }
}
