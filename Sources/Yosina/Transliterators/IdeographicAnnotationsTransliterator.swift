// This file is automatically generated. Do not edit.
// Generated on: 2025-09-20 03:42:24 +0000

import Foundation

public struct IdeographicAnnotationsTransliterator: Transliterator {
    private static let mapping: [Character: Character?] = [
        "\u{3192}": "\u{4E00}",
        "\u{3193}": "\u{4E8C}",
        "\u{3194}": "\u{4E09}",
        "\u{3195}": "\u{56DB}",
        "\u{3196}": "\u{4E0A}",
        "\u{3197}": "\u{4E2D}",
        "\u{3198}": "\u{4E0B}",
        "\u{3199}": "\u{7532}",
        "\u{319A}": "\u{4E59}",
        "\u{319B}": "\u{4E19}",
        "\u{319C}": "\u{4E01}",
        "\u{319D}": "\u{5929}",
        "\u{319E}": "\u{5730}",
        "\u{319F}": "\u{4EBA}",
    ]

    public init() {}

    public func transliterate<S: Sequence>(_ chars: S) -> [TransliteratorChar] where S.Element == TransliteratorChar {
        var result: [TransliteratorChar] = []
        var offset = 0

        for char in chars {
            if let charValue = char.value, let replacement = Self.mapping[charValue] {
                if let replacement = replacement {
                    let char = TransliteratorChar(value: replacement, offset: offset, source: char)
                    offset += replacement.utf8.count
                    result.append(char)
                }
            } else {
                let char = char.withOffset(offset)
                offset += char.utf8Count
                result.append(char)
            }
        }

        return result
    }
}
